@startuml
skinparam dpi 300
title
**UML of Twice Treasured APP**
end title

left to right direction


package Activities {
    together {
        class IntroPage
        class LoginPage
        class RegisterActivity
        class UserDetailPage
        class PrivateChat
        class PrivateMenuActivity
        class ProductEditorPage
        class SearchResultPage
        class ProductsManagePage
        class HomePage
        class NotificationPage
        class UserPage
        class FavoritePage
        class Post
        class ProductPage
        class SearchService
        class Page
    }
}

package Adapters {
    together {
        class FavoriteAdapter
        class RecommendAdapter
        class CategoryAdapter
        class ChatMenuAdapter
        class MessageAdapter
        class NotificationAdapter
        class ProductsManageAdapter
        class SearchItemAdapter
        class UserAdapter
    }
}

package common {
    together {
        class AVLTree
        class AVLNode
        class CommonHelper
    }
}

package basicClass {
    together {
        class UserState
        class User
        class UserLoggedInState
        class UserLoggedOutState
        class Category
        class Product
        class MessageBuble
        class MessageEnvironment
        class Notification
        class Favorite
        class GlobalVariables
        class Database
        class Notice
        class FavoriteNotice
        class UserNotice
        class NoticeFactory
        class Parser
        class Token
        class Tokenizer
        class OnDataUpdatedListener
        class LocationResultListener
    }
}

FavoritePage --|> Page
HomePage --|> Page
IntroPage --|> Page
LoginPage --|> Page
NotificationPage --|> Page
UserPage <--> Page
PrivateMenuActivity --|> Page
Post --> Product
ProductEditorPage --> Product
ProductPage --> Product
ProductsManagePage --> Product
SearchService --> Product
FavoritePage --> FavoriteAdapter
HomePage --> RecommendAdapter
ProductPage --> RecommendAdapter
NotificationPage --> NotificationAdapter
UserPage --> UserAdapter
UserPage --> ChatMenuAdapter
PrivateChat --> MessageBuble
PrivateChat --> MessageAdapter
ProductsManagePage --> ProductsManageAdapter
RegisterActivity --> User
SearchResultPage --> SearchService
SearchResultPage --> SearchItemAdapter
UserDetailPage --> User

ChatMenuAdapter --> User
NotificationAdapter --> Notification
ProductsManageAdapter --> Product
RecommendAdapter --> Product
SearchItemAdapter --> Product
UserAdapter --> User
CategoryAdapter --> Category

AVLTree <|-- AVLNode
AVLTree --> Parser
AVLTree --> Product
User --> CommonHelper
LocationResultListener --> CommonHelper

User --> Favorite
User --> GlobalVariables
User --> MessageEnvironment
User --> Notification
User --> Product
User <|-- UserLoggedInState
User <|-- UserLoggedOutState
User --> UserNotice
User --> Database
Product --> Favorite
Product --> Database
Product --> FavoriteNotice
Category --> Product

UserState --> GlobalVariables
Tokenizer --> Parser
Token --> Tokenizer
UserState <|-- UserLoggedInState
UserState <|-- UserLoggedOutState
Notification --> UserNotice
Notification --> FavoriteNotice
Favorite --> FavoriteNotice
Notice <|-- FavoriteNotice
Notice <|-- UserNotice
OnDataUpdatedListener --> GlobalVariables

package basicClass {
class Category {
        - int Id
        - String CategoryName
        - String ImagePath

        + Category(): void
        + getId(): int
        + setId(int id): void
        + getCategoryName(): String
        + setCategoryName(String categoryName): void
        + getImagePath(): String
        + setImagePath(String imagePath): void
    }

    class Database {
            - static FirebaseDatabase database

            + Database(): void
            + getDatabase(): synchronized FirebaseDatabase
            + uploadJsonToFirebase(Context context, String assetFileName): void
        }

        class Favorite  {
            - String favoriteID
            - String userID
            - String productID
            - boolean favoriteStatus

            + Favorite(): void
            + Favorite(String favoriteID, String userID, String productID, boolean favoriteStatus): void
            + getFavoriteID(): String
            + setFavoriteID(String favoriteID): void
            + getUserID(): String
            + setUserID(String userID): void
            + getProductID(): String
            + setProductID(String productID): void
            + isFavoriteStatus(): boolean
            + setFavoriteStatus(boolean favoriteStatus): void
        }

class FavoriteNotice  {
        - FirebaseDatabase database
        - DatabaseReference mDatabase

        + addNotice(String uid): void
        - generateNotice(String uid, String ownerId, String productName): void
    }

    class GlobalVariables {
        - static GlobalVariables instance
        - User loginUser
        - ArrayList<Category> categoryList
        - UserState state

        + GlobalVariables(): void
        + getInstance(): synchronized GlobalVariables
        + getLoginUser(): User
        + setLoginUser(User loginUser): void
        + getCategoryList(): ArrayList<Category>
        + setCategoryList(ArrayList<Category> categoryList): void
        + getState(): UserState
        + setState(UserState state): void
        + addLoginUser(User loginUser): void
        + removeLoginUser(): void
        + isVisitorMode(): boolean
    }

    interface LocationResultListener {
        + onLocationResult(Address address): void
    }

    class MessageBuble {
        - String message
        - String senderId
        - String timestamp

        + MessageBuble(): void
        + MessageBuble(String message, String senderId, String timestamp): void
        + getMessage(): String
        + setMessage(String message): void
        + getSenderId(): String
        + setSenderId(String senderId): void
        + getTimestamp(): String
        + setTimestamp(String timestamp): void
        + toString(): String
    }

class MessageEnvironment {
        - String environmentId
        - String recentSenderId
        - String timestamp
        - String recentMessageTimestamp
        - List<String> userIds
        - List<MessageBuble> messageList

        + MessageEnvironment(): void
        + MessageEnvironment(String environmentId, List<String> userIds, String timestamp, String recentSenderId, String recentMessageTimestamp, List<MessageBuble> messageList): void
        + getEnvironmentId(): String
        + setEnvironmentId(String environmentId): void
        + getUserIds(): List<String>
        + setUserIds(List<String> userIds): void
        + getTimestamp(): String
        + setTimestamp(String timestamp): void
        + getRecentSenderId(): String
        + setRecentSenderId(String recentSenderId): void
        + getRecentMessageTimestamp(): String
        + setRecentMessageTimestamp(String recentMessageTimestamp): void
        + addMessage(MessageBuble messageBuble): void
        + getMessageList(): List<MessageBuble>
    }

    interface Notice {
        + addNotice(String uid): void
    }

    class NoticeFactory {
        + createNotice(String type): Notice
    }

    class Notification {
        - String notiID
        - String userID
        - String notiTitle
        - String notiContents
        - int notiStatus
        - String createTime
        - String notiType
        - String notiProductID

        + Notification(): void
        + getNotiID(): String
        + setNotiID(String notiID): void
        + getUserID(): String
        + setUserID(String userID): void
        + getNotiTitle(): String
        + setNotiTitle(String notiTitle): void
        + getNotiContents(): String
        + setNotiContents(String notiContents): void
        + getNotiStatus(): int
        + setNotiStatus(int notiStatus): void
        + getCreateTime(): String
        + setCreateTime(String createTime): void
        + getNotiType(): String
        + setNotiType(String notiType): void
        + getNotiProductID(): String
        + setNotiProductID(String notiProductID): void
    }

    class UserNotice  {
            - FirebaseDatabase database
            - DatabaseReference mDatabase

            + addNotice(String uid): void
        }

        interface UserState {
            + addLoginUser(User loginUser): void
            + removeLoginUser(): void
        }

        class UserLoggedOutState {
            + addLoginUser(User loginUser): void
            + removeLoginUser(): void
        }

        class UserLoggedInState  {
            + addLoginUser(User loginUser): void
            + removeLoginUser(): void
        }

        class User {
            - String id
            - String name
            - String email
            - String password
            - String headImage
            - String location
            - List<String> messageIdList

            + User(): void
            + User(String id, String name, String email, String password, String headImage, String location): void
            + getId(): String
            + getName(): String
            + getEmail(): String
            + getPassword(): String
            + getHeadImage(): String
            + getLocation(): String
            + setId(String id): void
            + setName(String name): void
            + setEmail(String email): void
            + setPassword(String password): void
            + setHeadImage(String headImage): void
            + setLocation(String location): void
            + addMessageId(String messageId): void
            + getMessageIds(): List<String>
        }

        class Tokenizer {
            - String buffer
            - Token currentToken
            - ArrayList<String> categoryList
            - ArrayList<String> locationList
            - ArrayList<String> ignoreList

            + Tokenizer(String text): void
            + next(): void
            + current(): Token
            + hasNext(): boolean
            - checkTypo(String input): String
            - checkMiss(String input): String
            - checkTypoWithMiss(String input): String
            - checkDuplicate(String input): String
        }

        class Token {
            - String token
            - Type type

            + Token(String token, Type type): void
            + getToken(): String
            + getType(): Type
            + toString(): String
        }

        class Product {
            - String name
            - String productID
            - String category
            - String description
            - String price
            - String condition
            - String uploadDate
            - String status
            - String imgLink
            - String ownerID
            - String categoryID
            - String location

            + Product(String name, String productID, String category, String description, String price, String condition, String uploadDate, String status, String imgLink, String ownerID, String categoryID, String location): void
            + Product(): void
            + getProductID(): String
            + setProductID(String productID): void
            + getCategory(): String
            + setCategory(String category): void
            + getDescription(): String
            + setDescription(String description): void
            + getPrice(): String
            + setPrice(String price): void
            + getCondition(): String
            + setCondition(String condition): void
            + getUploadDate(): String
            + setUploadDate(String uploadDate): void
            + getStatus(): String
            + setStatus(String status): void
            + getImgLink(): String
            + setImgLink(String imgLink): void
            + getName(): String
            + setName(String name): void
            + getOwnerID(): String
            + setOwnerID(String ownerID): void
            + getCategoryID(): String
            + setCategoryID(String categoryID): void
            + getLocation(): String
            + setLocation(String location): void
            + compareTo(Product other): int
            + hashCode(): int
        }

class Parser {
        - Tokenizer tokenizerLocation
        - Tokenizer tokenizerCategory
        - Tokenizer tokenizerName
        - boolean locationCheck
        - boolean categoryCheck
        - boolean nameCheck

        + Parser(String text): void
        + parseEXP(AVLTree<Product> avlTree): AVLTree<Product>
        - parseName(AVLTree<Product> avlTree): AVLTree<Product>
        - parseCategory(AVLTree<Product> avlTree): AVLTree<Product>
        - checkNameTypo(String input, String check): boolean
    }

    interface OnDataUpdatedListener {
        + onDataUpdated(): void
    }

}

package Adapters{
class NotificationAdapter {
    - notifications: ArrayList<Notification>
    - context: Context

    + NotificationAdapter(notifications: ArrayList<Notification>): void
    + onCreateViewHolder(parent: ViewGroup, viewType: int): NotificationAdapter.viewholder
    + onBindViewHolder(holder: NotificationAdapter.viewholder, position: int): void
    + getItemCount(): int
}

class ProductsManageAdapter {
    - mContext: Context
    - productList: List<Product>
    - inflater: LayoutInflater

    + ProductsManageAdapter(context: Context, products: List<Product>): void
    + onCreateViewHolder(parent: ViewGroup, viewType: int): ProductsManageAdapter.ProductViewHolder
    + onBindViewHolder(holder: ProductsManageAdapter.ProductViewHolder, position: int): void
    + getItemCount(): int
    + setProducts(newProducts: List<Product>): void
}

class MessageAdapter {
    - context: Context
    - userId: String
    - messageList: List<MessageBuble>

    + MessageAdapter(context: Context, userId: String, messageList: List<MessageBuble>): void
    + onCreateViewHolder(parent: ViewGroup, viewType: int): RecyclerView.ViewHolder
    + onBindViewHolder(holder: RecyclerView.ViewHolder, position: int): void
    + getItemCount(): int
    + getItemViewType(position: int): int
    + setMessageList(messageList: List<MessageBuble>): void
}

class RecommendAdapter {
    - products: ArrayList<Product>
    - context: Context
    - favoriteRef: DatabaseReference
    - currentUser: User

    + RecommendAdapter(products: ArrayList<Product>, context: Context): void
    + onCreateViewHolder(parent: ViewGroup, viewType: int): RecommendAdapter.ViewHolder
    + onBindViewHolder(holder: RecommendAdapter.ViewHolder, position: int): void
    + getItemCount(): int

}

class ChatMenuAdapter {
    - context: Context
    - usersList: List<User>

    + ChatMenuAdapter(context: Context, usersList: List<User>): void
    + onCreateViewHolder(parent: ViewGroup, viewType: int): ChatMenuAdapter.UserViewHolder
    + onBindViewHolder(holder: ChatMenuAdapter.UserViewHolder, position: int): void
    + getItemCount(): int
    + setUsersList(usersList: List<User>): void

}

class SearchItemAdapter {
    - context: Context
    - productList: List<Product>

    + SearchItemAdapter(context: Context, productList: List<Product>): void
    + onCreateViewHolder(parent: ViewGroup, viewType: int): SearchItemAdapter.ProductViewHolder
    + onBindViewHolder(holder: SearchItemAdapter.ProductViewHolder, position: int): void
    + getItemCount(): int

}

class UserAdapter {
    - localDataSet: List<String>

    + UserAdapter(dataSet: List<String>): void
    + onCreateViewHolder(viewGroup: ViewGroup, viewType: int): UserAdapter.ViewHolder
    + onBindViewHolder(viewHolder: UserAdapter.ViewHolder, position: int): void
    + getItemCount(): int
}

class CategoryAdapter {
    - categories: ArrayList<Category>
    - context: Context

    + CategoryAdapter(categories: ArrayList<Category>): void
    + onCreateViewHolder(parent: ViewGroup, viewType: int): CategoryAdapter.ViewHolder
    + onBindViewHolder(holder: CategoryAdapter.ViewHolder, position: int): void
    + getItemCount(): int

}

class MessageAdapter {
    - context: Context
    - userId: String
    - messageList: List<MessageBuble>

    + MessageAdapter(context: Context, userId: String, messageList: List<MessageBuble>): void
    + onCreateViewHolder(parent: ViewGroup, viewType: int): RecyclerView.ViewHolder
    + onBindViewHolder(holder: RecyclerView.ViewHolder, position: int): void
    + getItemCount(): int
    + getItemViewType(postion: int): int
    + setMessageList(messageList: List<MessageBuble>): void

}
}


package Activities{
class FavoritePage {
    - tvTitle: TextView
    - rvFavorite: RecyclerView
    - btn_return_to_home: ImageButton
    - adapter: FavoriteAdapter
    - selectAllCheckbox: CheckBox
    - btnManage: Button
    - btnDelete: Button
    - bottomBar: LinearLayout
    - clPrivate: ConstraintLayout
    - clHome: ConstraintLayout
    - clMe: ConstraintLayout
    - clFavorite: ConstraintLayout
    - btnTradePlatform: Button
    - favoriteRef: DatabaseReference
    - productRef: DatabaseReference
    - currentUser: User
    - globalVars: GlobalVariables
    - pbLoading: ProgressBar
    - isPriceAscending: boolean
    - currentCategory: String
    - allFavoriteProducts: List<Product>

    + onCreate(savedInstanceState: Bundle): void
    - initFavoriteProducts(): void
    + handleProductClick(product: Product): void
    - setupManageMode(): void
    - setupSelectAllFeature(): void
    - updateSelectAllVisibility(visible: boolean): void
    - loadFavoriteProducts(listener: FavoriteProductsListener): void
    + filterByCategory(category: String): void
    - setupAllItemsButton(): void
    - setupPriceSortingButton(): void
    - initCategoryButtons(): void
}


class HomePage {
    - btnSearch: ImageView
    - btnNotification: ImageView
    - clPrivate: ConstraintLayout
    - clHome: ConstraintLayout
    - clMe: ConstraintLayout
    - clFavorite: ConstraintLayout
    - btnTradePlatform: Button
    - input: TextView
    - txtUserName: TextView
    - btnLogout: ImageView
    - btnLoginAgain: ImageView
    - database: FirebaseDatabase
    - globalVars: GlobalVariables
    - btnFavorite: TextView
    - imageViewFavorite: ImageView
    - rvRecommend: RecyclerView

    + onCreate(savedInstanceState: Bundle): void
    + onStart(): void
    - initLoginUser(): void
    - initRecommend(): void
    - queryCanberraProducts(): void
    - displayProducts(products: ArrayList<Product>): void
    - initCategory(): void
}

class IntroPage {
    + onCreate(savedInstanceState: Bundle): void
    - setButton(): void
}

class LoginPage {
    - register: Button
    - login: Button
    - account: EditText
    - password: EditText
    - auth: FirebaseAuth

    + onCreate(savedInstanceState: Bundle): void
    + checkAccount(): boolean
    + checkPassword(): boolean
    - loginUser(txtAccount: String, txtPassword: String): void
}

class NotificationPage {
    - storage: FirebaseStorage
    - database: FirebaseDatabase
    - globalVars: GlobalVariables
    - notification_btnBack: ImageView

    + onCreate(savedInstanceState: Bundle): void
    - initNotiList(): void
    + readNotice(notiID: String): void
}


abstract class Page {
    + goToActivity(cls: Class<?>): void
    + goHomePage(): void
    + goUserPage(): void
    + goTradePage(): void
    + goFavorite(): void
    + goPrivateMenu(): void
    + goLoginPage(): void
    + goRegisterPage(): void
    + goUserDetailPage(): void
    + goNotification(): void
    + goIntroPage(): void
}


class Post {
    - database: FirebaseDatabase
    - mDatabase: DatabaseReference
    - storage: FirebaseStorage
    - storageReference: StorageReference
    - mGetContent: ActivityResultLauncher<String>
    - imageUri: String
    - progressDialog: ProgressDialog

    + onCreate(savedInstanceState: Bundle): void
    - setupSpinner(spinner: Spinner, options: String[]): void
    - handleImageSelection(uri: Uri, imageView: ImageView): void
    - navigateHome(): void
    - validateInputs(name: String, description: String, price: String, category: String, condition: String): boolean
    - submitProduct(categorySpinner: Spinner, conditionSpinner: Spinner): void
    - saveProductToDatabase(name: String, description: String, price: String, category: String, condition: String): void
    - showToast(message: String): void
    - uploadImageToFirebase(uri: Uri): void
    - getCategoryId(category: String): String
    - getCurrentTimestamp(): String
}

class PrivateChat {
    - editTextMessage: EditText
    - buttonSend: Button
    - buttonBack: Button
    - receiverEmailText: TextView
    - recyclerViewMessages: RecyclerView
    - messagesList: List<String>
    - messageAdapter: MessageAdapter
    - auth: FirebaseAuth
    - database: FirebaseDatabase
    - reference: DatabaseReference
    - environmentId: String
    - userArrayList: ArrayList<User>
    - loginUser: User
    - otherUser: User
    - globalVars: GlobalVariables
    - messageEnvironment: MessageEnvironment

    + onCreate(savedInstanceState: Bundle): void
    - openNewOrExistingEnvironment(): void
    - setUpRecycler(messageEnvironment: MessageEnvironment): void
    - updateEnvironment(snapshot: DataSnapshot): void
    - addMessageIdToUsers(): void
}

class PrivateMenuActivity {
    - clPrivate: ConstraintLayout
    - clHome: ConstraintLayout
    - clMe: ConstraintLayout
    - clFavorite: ConstraintLayout
    - btnTradePlatform: Button
    - btnTestMessage: Button
    - recyclerViewChatMenu: RecyclerView
    - currentUser: User
    - usersList: List<User>
    - chatMenuAdapter: ChatMenuAdapter
    - database: FirebaseDatabase

    + onCreate(savedInstanceState: Bundle): void
}

class ProductEditorPage {
    - currentProduct: Product
    - editProductName: EditText
    - editProductPrice: EditText
    - editProductDescription: EditText
    - curImageView: ImageView
    - backButton: ImageButton
    - imageButton: Button
    - submitButton: Button
    - categorySpinner: Spinner
    - conditionSpinner: Spinner
    - mGetContent: ActivityResultLauncher<String>
    - imageUri: String

    + onCreate(savedInstanceState: Bundle): void
    - setupSpinner(spinner: Spinner, options: String[]): void
    - setupEditTextListeners(): void
    - handleImageSelection(uri: Uri): void
    - getCurrentTimestamp(): String
    - getCategoryId(category: String): String
    - updateProduct(): void
}

class ProductPage {
    - favoriteRef: DatabaseReference
    - userRef: DatabaseReference
    - currentUser: User
    - globalVars: GlobalVariables
    - productFavorite: ImageView
    - isFavorited: boolean
    - favoriteID: String
    - product: Product
    - chatWithSellerBtn: Button

    + onCreate(savedInstanceState: Bundle): void
    - displayProductDetails(product: Product): void
    - checkFavoriteStatus(user: User, product: Product): void
    - updateFavoriteButton(isFavorited: boolean): void
    - toggleFavoriteStatus(user: User, product: Product): void
}

class ProductsManagePage {
    - recyclerView: RecyclerView
    - productsManageAdapter: ProductsManageAdapter
    - productList: List<Product>
    - returnButton: ImageButton

    + onCreate(savedInstanceState: Bundle): void
    - loadUserOwnedProducts(): void
}

class RegisterActivity {
    - email: EditText
    - password: EditText
    - registerButton: Button
    - loginButton: Button
    - auth: FirebaseAuth
    - database: FirebaseDatabase
    - reference: DatabaseReference
    - storage: FirebaseStorage

    + onCreate(savedInstanceState: Bundle): void
    - registerUser(txtEmail: String, txtPassword: String): void
}


class SearchResultPage {
    - btnBack: ImageView
    - btnPrice: TextView
    - btnCondition: TextView
    - btnUsed: TextView
    - recyclerViewProducts: RecyclerView
    - searchItemAdapter: SearchItemAdapter
    - searchField: EditText
    - btnSearch: ImageView
    - isPriceDropdown: boolean
    - isConditionDropdown: boolean
    - searchService: SearchService
    - SearchString: String

    + onCreate(savedInstanceState: Bundle): void
    - initSearchString(): void
    - initViews(): void
    - applyFilterAndSort(): void
    - setupToggleIcons(): void
    - updateRecyclerView(products: ArrayList<Product>): void
    - ResultProductOfSearch(searchString: String): void
    - ResultNewProducts(searchString: String): void
    - ResultUsedProducts(searchString: String): void
    - ResultProductsAscendingOrder(searchString: String): void
    - ResultProductsDescendingOrder(searchString: String): void

    + SortState
    + FilterState
}

class SearchService {
    - reference: DatabaseReference

    + SearchService(): void
    - loadData(onDataLoaded: Consumer<DataSnapshot>): void
    + FindProduct(searchString: String, callback: Consumer<ArrayList<Product>>): void
    + FindNewProduct(searchString: String, callback: Consumer<ArrayList<Product>>): void
    + FindUsedProduct(searchString: String, callback: Consumer<ArrayList<Product>>): void
    - processProducts(snapshot: DataSnapshot, searchString: String): AVLTree<Product>
    - processNewProducts(snapshot: DataSnapshot, searchString: String): AVLTree<Product>
    - processUsedProducts(snapshot: DataSnapshot, searchString: String): AVLTree<Product>
    + FindProductsAscendingOrder(searchString: String, callback: Consumer<ArrayList<Product>>): void
    + FindProductsDescendingOrder(searchString: String, callback: Consumer<ArrayList<Product>>): void
    + FindNewProductsAscendingOrder(searchString: String, callback: Consumer<ArrayList<Product>>): void
    + FindNewProductsDescendingOrder(searchString: String, callback: Consumer<ArrayList<Product>>): void
    + FindUsedProductsAscendingOrder(searchString: String, callback: Consumer<ArrayList<Product>>): void
    + FindUsedProductsDescendingOrder(searchString: String, callback: Consumer<ArrayList<Product>>): void
}


class UserPage {
    - storage: FirebaseStorage
    - database: FirebaseDatabase
    - storageReference: StorageReference
    - globalVars: GlobalVariables
    - clPrivate: ConstraintLayout
    - clHome: ConstraintLayout
    - clMe: ConstraintLayout
    - clFavorite: ConstraintLayout
    - btnTradePlatform: Button
    - ivUserPic: ImageView
    - username: TextView
    - useremail: TextView
    - cvUserPic: CardView
    - clUserProfile: ConstraintLayout
    - clUserFavorite: ConstraintLayout
    - clUserMessage: ConstraintLayout
    - clUserProduct: ConstraintLayout
    - pbUserPage: ProgressBar
    - mGetContent: ActivityResultLauncher<String>
    - imageUri: String
    - sellerID: String

    + onCreate(savedInstanceState: Bundle): void
    - handleImageSelection(uri: Uri): void
    - loadUserProfile(userID: String): void
    - goToProductsManagePage(): void
}


class UserDetailPage {
    - storage: FirebaseStorage
    - database: FirebaseDatabase
    - auth: FirebaseAuth
    - storageReference: StorageReference
    - globalVars: GlobalVariables
    - ivUserPic: ImageView
    - editName: EditText
    - editUID: EditText
    - editEmail: EditText
    - editLocation: EditText
    - editPwd: EditText
    - editRPwd: EditText
    - clRPwd: ConstraintLayout
    - btnRelocation: ImageView
    - btnSave: Button
    - btnCancel: Button
    - pbUserDetail: ProgressBar
    - user_detail_pic: CardView
    - user_detail_btnBack: ImageView
    - mGetContent: ActivityResultLauncher<String>
    - imageUri: String
    - fusedLocationProviderClient: FusedLocationProviderClient

    + onCreate(savedInstanceState: Bundle): void
    + onRequestPermissionsResult(requestCode: int, permissions: String[], grantResults: int[]): void
    - updateUserInfo(): void
    - Validate(): Boolean
    - ReloadPage(): void
    - handleImageSelection(uri: Uri): void
    - getLocation(): void
    - getCityNameFromLocation(location: Location): String
}
}

package common{

class AVLNode {
    - T key
    - ArrayList<T> duplicates
    - int height
    - AVLNode<T> leftChild
    - AVLNode<T> rightChild

    + AVLNode(T key)
    + AVLNode(T key, AVLNode<T> leftChild, AVLNode<T> rightChild)
    + getKey(): T
    + getHeight(): int
    + getDuplicates(): ArrayList<T>
    + getCount(): int
    + toString(): String
    + getLeftChild(): AVLNode<T>
    + getRightChild(): AVLNode<T>
}

class AVLTree {
    - AVLNode<T> root
    - static final int ALLOWED_IMBALANCE = 1

    + AVLTree()
    + insert(T key): void
    + remove(T key): void
    + findMinimum(): T
    + clear(): void
    + isEmpty(): boolean
    + nodeHeight(AVLNode<T> node): int
    + balance(AVLNode<T> node): AVLNode<T>
    + doubleRotateWithRightChild(AVLNode<T> node): AVLNode<T>
    + rotateWithRightChild(AVLNode<T> node): AVLNode<T>
    + doubleRotateWithLeftChild(AVLNode<T> node): AVLNode<T>
    + rotateWithLeftChild(AVLNode<T> node): AVLNode<T>
    + findMinNode(AVLNode<T> node): AVLNode<T>
    + findMaxNode(AVLNode<T> node): AVLNode<T>
    + search(AVLNode<T> currentNode, T target): AVLNode<T>
    + convertToArrayList(): ArrayList<T>
    + convertToAscendingArrayList(): ArrayList<T>
    + convertToDescendingArrayList(): ArrayList<T>
    + getRoot(): AVLNode<T>
    + isBalanced(): boolean
    + isValidAVLTree(): boolean
}

class CommonHelper {
    + showToast(Context context, String message): void
    + showAlertDialog(Context context, String title, String message, String positiveButtonLabel, DialogInterface.OnClickListener positiveButtonClickListener, String negativeButtonLabel, DialogInterface.OnClickListener negativeButtonClickListener): void
    + refreshLoginUser(OnDataUpdatedListener listener): void
    + getLastLocation(Context context, Activity activity, LocationResultListener listener): void
    + getCurrentTimestamp(): String
}

}

@enduml